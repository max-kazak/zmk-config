/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */
// Overrides nice_view cs_gpios pin to D0 from D1, 
// D1 on kyria is shared with LED's and causes issues.

&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

&gresc {
    mods = <(MOD_LALT|MOD_RALT|MOD_LSFT|MOD_RSFT)>;
    keep-mods = <(MOD_LSFT|MOD_RSFT)>;
};

&sl {
    release-after-ms = <3000>;
};

/ {
    macros {
        dbl_key: dbl_key {
            compatible = "zmk,behavior-macro-one-param";
            label = "DBL_KEY";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
        dbl_key_l: dbl_key_l {
            compatible = "zmk,behavior-macro-one-param";
            label = "DBL_KEY_LEFT";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_1to1 &kp MACRO_PLACEHOLDER &kp LEFT>;
        };
        cboc: cboc {
            compatible = "zmk,behavior-macro-one-param";
            label = "CURL_BRCKT_OPENCLOSE_EXTRAKEY";
            #binding-cells = <1>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
        rboc: rboc {
            compatible = "zmk,behavior-macro-one-param";
            label = "RND_BRCKT_OPENCLOSE_EXTRAKEY";
            #binding-cells = <1>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
        sboc: sboc {
            compatible = "zmk,behavior-macro-one-param";
            label = "SQR_BRCKT_OPENCLOSE_EXTRAKEY";
            #binding-cells = <1>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };
        ptr: ptr {
            compatible = "zmk,behavior-macro";
            label = "PTR";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
        };
    };

    behaviors {
        cboc_dbl_tap: cboc_dbl_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "{}+KEY1_ONHOLD_DBL_KEY2_ONTAP";
            bindings =
                <&cboc>,
                <&dbl_key>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        rboc_dbl_tap: rboc_dbl_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "()+KEY1_ONHOLD_DBL_KEY2_ONTAP";
            bindings =
                <&rboc>,
                <&dbl_key>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        sboc_dbl_tap: sboc_dbl_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "[]+KEY1_ONHOLD_DBL_KEY2_ONTAP";
            bindings =
                <&sboc>,
                <&dbl_key>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        dbl_mt_l: dbl_mt_l {
            compatible = "zmk,behavior-hold-tap";
            label = "DOUBLE_MODTAP+LEFT";
            bindings =
                <&dbl_key_l>,
                <&dbl_key_l>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        td_t: td_t {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_T";
            #binding-cells = <0>;
            bindings =
                <&mt LEFT_BRACE T>,
                <&cboc_dbl_tap LEFT T>;
        };
        td_y: td_y {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_Y";
            #binding-cells = <0>;
            bindings =
                <&mt RIGHT_BRACE Y>,
                <&cboc_dbl_tap OPER Y>;
        };
        td_g: td_g {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_G";
            #binding-cells = <0>;
            bindings =
                <&mt LEFT_PARENTHESIS G>,
                <&rboc_dbl_tap LEFT G>;
        };
        td_h: td_h {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_H";
            #binding-cells = <0>;
            bindings =
                <&mt RIGHT_PARENTHESIS H>,
                <&rboc_dbl_tap OPER H>;
        };
        td_b: td_b {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_B";
            #binding-cells = <0>;
            bindings =
                <&mt LEFT_BRACKET B>,
                <&rboc_dbl_tap LEFT B>;
        };
        td_n: td_n {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_N";
            #binding-cells = <0>;
            bindings =
                <&mt RIGHT_BRACKET N>,
                <&rboc_dbl_tap OPER N>;
        };
        td_qt: td_qt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_FOR_QOUTES";
            #binding-cells = <0>;
            bindings =
                <&mt DOUBLE_QUOTES SINGLE_QUOTE>,
                <&dbl_mt_l DOUBLE_QUOTES SINGLE_QUOTE>;
        };
        td_cln: td_cln {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_COLLON";
            #binding-cells = <0>;
            bindings =
                <&mt COLON SEMICOLON>,
                <&dbl_key COLON>;
        };
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <32 45 33 34 35 36 37 38 39 6 7 8 9 10 11 18 19 20 21 22 23 33 34 35 36 37 38 39 46 47 48 49>;
            hold-trigger-on-release;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 30 31 40 41 42 43 44>;
            hold-trigger-on-release;
            flavor = "tap-preferred";
        };
        ptrhold: ptrhold {
            compatible = "zmk,behavior-hold-tap";
            label = "PTRHOLD";
            bindings =
                <&ptr>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        spcund: space_underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "SPCUND";
            bindings =
                <&kp SPACE>,
                <&kp UNDERSCORE>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
        lsticktgl_1: layer_stick_toggle_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_STICK_TOGGLE_1";
            #binding-cells = <0>;
            bindings =
                <&sl 1>,
                <&to 1>;
        };
        lsticktgl_2: layer_stick_toggle_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_STICK_TOGGLE_2";
            #binding-cells = <0>;
            bindings =
                <&sl 2>,
                <&to 2>;
        };
        gg: gg {
            compatible = "zmk,behavior-tap-dance";
            label = "GG";
            #binding-cells = <0>;
            bindings =
                <&kp G>,
                <&to 0>;
        };
        ij: ij {
            compatible = "zmk,behavior-tap-dance";
            label = "IJ";
            #binding-cells = <0>;
            bindings =
                <&kp I>,
                <&kp J>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp TAB          &kp Q  &kp W         &kp E            &kp R          &td_t                                                              &td_y      &kp U          &kp I        &kp O           &kp P     &gresc
&mt LSHIFT CAPS  &kp A  &hml LCTRL S  &hml LEFT_ALT D  &hml LSHIFT F  &td_g                                                              &td_h      &hmr RSHIFT J  &hmr RALT K  &hmr RCTRL L    &td_cln   &td_qt
&sk LCTRL        &kp Z  &kp X         &kp C            &kp V          &td_b         &kp BACKSPACE  &kp DEL    &kp PAUSE_BREAK  &kp UP    &td_n      &kp M          &kp COMMA    &ptrhold 0 DOT  &kp FSLH  &kp LCTRL
                                      &kp LGUI         &sk LALT       &lsticktgl_1  &spcund        &kp ENTER  &kp LEFT         &kp DOWN  &kp RIGHT  &lsticktgl_2   &kp RALT
            >;

            label = "abc";
        };

        num_layer {
            bindings = <
&kp F1        &kp F2        &kp F3         &kp F4         &kp F5          &kp F6                                                    &none    &kp N7  &kp N8  &kp N9  &kp STAR  &kp KP_DIVIDE
&mt LSHFT F7  &kp F8        &hml LCTRL F9  &hml LALT F10  &hml LSHFT F11  &kp F12                                                   &kp N0   &kp N4  &kp N5  &kp N6  &kp PLUS  &kp MINUS
&trans        &out OUT_TOG  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_CLR  &to 3  &none     &kp PG_UP      &kp N0   &kp N1  &kp N2  &kp N3  &kp DOT   &kp EQUAL
                                           &trans         &trans          &to 0         &none       &none  &kp HOME  &kp PAGE_DOWN  &kp END  &to 2   &none
            >;

            label = "123";
        };

        sym_layer {
            bindings = <
&none  &kp EXCL       &kp AT    &kp HASH       &kp DOLLAR  &kp PRCNT                              &none     &none       &kp INSERT        &kp PAUSE_BREAK  &kp PRINTSCREEN     &kp C_VOL_UP
&none  &kp CARET      &kp AMPS  &kp STAR       &kp PLUS    &kp EQUAL                              &kp C_RW  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_FAST_FORWARD  &kp C_VOL_DN
&none  &kp BACKSLASH  &kp PIPE  &kp KP_DIVIDE  &kp MINUS   &none      &none  &none  &none  &none  &none     &none       &none             &none            &none               &kp C_MUTE
                                &none          &none       &to 1      &none  &none  &none  &none  &none     &to 0       &none
            >;

            label = "!@#";
        };

        game_layer {
            bindings = <
&kp ESC    &kp TAB    &kp Q  &kp W     &kp E     &kp R                                              &none  &none  &none  &none  &none  &none
&kp LCTRL  &kp LSHFT  &kp A  &kp S     &kp D     &kp F                                              &none  &none  &none  &none  &none  &none
&kp M      &ij        &kp Z  &kp X     &kp C     &kp V          &kp B      &gg        &none  &none  &none  &none  &none  &none  &none  &none
                             &kp CAPS  &kp LALT  &kp LC(LSHFT)  &kp SPACE  &kp ENTER  &none  &none  &none  &none  &none
            >;

            label = "GAME";
        };
    };
};
